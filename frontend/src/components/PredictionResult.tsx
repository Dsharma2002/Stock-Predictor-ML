import React from 'react';
import { TrendingUp, TrendingDown, Shield, AlertTriangle, CheckCircle } from 'lucide-react';
import type { PredictionResponse } from '../types';
import { formatCurrency, formatPercentage, getChangeColor, getConfidenceColor } from '../utils/formatters';

interface PredictionResultProps {
  prediction: PredictionResponse;
}

const PredictionResult: React.FC<PredictionResultProps> = ({ prediction }) => {
  const isPositive = prediction.prediction_change >= 0;
  const changeColorClass = getChangeColor(prediction.prediction_change);
  const confidenceColorClass = getConfidenceColor(prediction.confidence);

  const getConfidenceIcon = () => {
    switch (prediction.confidence) {
      case 'high':
        return <CheckCircle className="w-4 h-4" />;
      case 'medium':
        return <Shield className="w-4 h-4" />;
      case 'low':
        return <AlertTriangle className="w-4 h-4" />;
      default:
        return <Shield className="w-4 h-4" />;
    }
  };

  return (
    <div className="w-full max-w-2xl mx-auto bg-white rounded-xl shadow-lg p-6 border border-gray-200">
      <div className="text-center mb-6">
        <h2 className="text-2xl font-bold text-gray-800 mb-2">
          Prediction for {prediction.ticker}
        </h2>
        <div className={`inline-flex items-center space-x-2 px-3 py-1 rounded-full text-sm font-medium ${confidenceColorClass}`}>
          {getConfidenceIcon()}
          <span>{prediction.confidence.toUpperCase()} CONFIDENCE</span>
        </div>
      </div>

      <div className="grid grid-cols-1 md:grid-cols-2 gap-6 mb-6">
        {/* Current Price */}
        <div className="bg-gray-50 rounded-lg p-4">
          <div className="text-sm text-gray-600 mb-1">Current Price</div>
          <div className="text-2xl font-bold text-gray-800">
            {formatCurrency(prediction.current_price)}
          </div>
        </div>

        {/* Predicted Price */}
        <div className="bg-blue-50 rounded-lg p-4">
          <div className="text-sm text-blue-600 mb-1">Predicted Price</div>
          <div className="text-2xl font-bold text-blue-800">
            {formatCurrency(prediction.predicted_price)}
          </div>
        </div>
      </div>

      {/* Change Information */}
      <div className="bg-gradient-to-r from-gray-50 to-gray-100 rounded-lg p-6">
        <div className="flex items-center justify-center space-x-4">
          <div className="flex items-center space-x-2">
            {isPositive ? (
              <TrendingUp className={`w-6 h-6 ${changeColorClass}`} />
            ) : (
              <TrendingDown className={`w-6 h-6 ${changeColorClass}`} />
            )}
            <div className="text-center">
              <div className={`text-2xl font-bold ${changeColorClass}`}>
                {formatCurrency(Math.abs(prediction.prediction_change))}
              </div>
              <div className="text-sm text-gray-600">
                {isPositive ? 'Expected Gain' : 'Expected Loss'}
              </div>
            </div>
          </div>

          <div className="h-12 w-px bg-gray-300"></div>

          <div className="text-center">
            <div className={`text-2xl font-bold ${changeColorClass}`}>
              {formatPercentage(prediction.prediction_change_percent)}
            </div>
            <div className="text-sm text-gray-600">Percentage Change</div>
          </div>
        </div>
      </div>

      {/* Disclaimer */}
      <div className="mt-6 p-4 bg-yellow-50 border border-yellow-200 rounded-lg">
        <div className="flex items-start space-x-2">
          <AlertTriangle className="w-5 h-5 text-yellow-600 mt-0.5 flex-shrink-0" />
          <div className="text-sm text-yellow-800">
            <strong>Disclaimer:</strong> This prediction is generated by an AI model and should not be considered as financial advice. 
            Always conduct your own research and consult with financial professionals before making investment decisions.
          </div>
        </div>
      </div>
    </div>
  );
};

export default PredictionResult;
